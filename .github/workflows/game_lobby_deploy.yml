name: Deploy the GameLobby Image

on:
  push:
    # this means that the workflow will only trigger if there are changes in this directory
    paths:
      - 'gamelobby/**'
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "gamelobby"
  cancel-in-progress: true

jobs:
#   test-job:
#     environment: gameroom
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
#      
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.12.2
#      
#       - name: Install dependencies
#         run: |
#           pip install -r backend/requirements.txt
#           pip install pytest
#        
#       - name: Run unit tests
#         run: |
#           echo "Running unit tests... This will take about 60 seconds."
#           python -m pytest
#         env:
#           API_KEY: "${{ secrets.API_KEY }}"
#           ASSISTANT_ID: "${{ secrets.ASSISTANT_ID }}"
#           ORGANIZATION: "${{ secrets.ORGANIZATION }}"
#           PROJECT: "${{ secrets.PROJECT }}"
#           WEATHER_API_KEY: "${{ secrets.WEATHER_API_KEY }}"
  
  build-job:
    runs-on: ubuntu-latest
    environment: gamelobby
    # needs: test-job
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout Repo
      uses: actions/checkout@main

    - name: Log in to GHCR
      uses: docker/login-action@master
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ${{ vars.REGISTRY }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@master
      with:
        images: ${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}
        flavor: |
            latest=true
        tags: |
            type=sha,format=long

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@master
      with:
        file: ${{vars.SUBFOLDER}}/Dockerfile
        context: ${{vars.SUBFOLDER}}/.
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true


  deploy-job:
    runs-on: ubuntu-latest
    environment: gamelobby
    needs: build-job
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@main
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # - name: Assume IAM role
      #   run: |
      #     aws sts assume-role --role-arn ${{ secrets.AWS_ROLE_ARN }} --role-session-name GitHubActionsSession > assume-role-output.json
      #     export AWS_ACCESS_KEY_ID=$(cat assume-role-output.json | jq -r '.Credentials.AccessKeyId')
      #     export AWS_SECRET_ACCESS_KEY=$(cat assume-role-output.json | jq -r '.Credentials.SecretAccessKey')
      #     export AWS_SESSION_TOKEN=$(cat assume-role-output.json | jq -r '.Credentials.SessionToken')

      - name: Create Kubeconfig file 
        run: |
            aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
            echo 'KUBE_CONFIG_DATA<<EOF' >> $GITHUB_ENV
            echo $(cat ~/.kube/config | base64) >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV   
          
      # - name: Get Kubectl infos
      #   uses: actions-hub/kubectl@master
      #   env:
      #     KUBE_CONFIG: ${{ env.KUBE_CONFIG_DATA }}
      #   with:
      #     args: get pods

      # - name: deploy to cluster
      #   uses: wahyd4/kubectl-helm-action@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
      #   with:
      #     args: kubectl get nodes

      # - name: deploy to cluster
      #   uses: wahyd4/kubectl-helm-action@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
      #   with:
      #     args: helm list

      - name: helm deploy
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        with:
          command: |
            helm list
            kubectl get pods
