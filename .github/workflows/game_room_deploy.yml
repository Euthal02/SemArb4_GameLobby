name: Deploy the GameRoom Image

on:
  push:
    # this means that the workflow will only trigger if there are changes in this directory
    paths:
      - 'gameroom/**'
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "gameroom"
  cancel-in-progress: true

jobs:
#   test-job:
#     environment: gameroom
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
#      
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.12.2
#      
#       - name: Install dependencies
#         run: |
#           pip install -r backend/requirements.txt
#           pip install pytest
#        
#       - name: Run unit tests
#         run: |
#           echo "Running unit tests... This will take about 60 seconds."
#           python -m pytest
#         env:
#           API_KEY: "${{ secrets.API_KEY }}"
#           ASSISTANT_ID: "${{ secrets.ASSISTANT_ID }}"
#           ORGANIZATION: "${{ secrets.ORGANIZATION }}"
#           PROJECT: "${{ secrets.PROJECT }}"
#           WEATHER_API_KEY: "${{ secrets.WEATHER_API_KEY }}"
  
  build-job:
    runs-on: ubuntu-latest
    environment: gameroom
    # needs: test-job
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout Repo
      uses: actions/checkout@main

    - name: Log in to GHCR
      uses: docker/login-action@master
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ${{ vars.REGISTRY }}

    # - name: Set Image Tags
    #   id: vars
    #   run: |
    #     UPPERCASE_USERNAME="${{github.repository_owner}}"
    #     TAG_COMMIT=${{ github.sha }}
    #     IMAGE_NAME=ghcr.io/${UPPERCASE_USERNAME,,}/pong-gameroom
    #     echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
    #     echo "TAG_COMMIT=$TAG_COMMIT" >> $GITHUB_ENV

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@master
      with:
        images: ${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}
        tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@master
      with:
        file: ${{vars.SUBFOLDER}}/Dockerfile.prod
        context: ${{vars.SUBFOLDER}}/.
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # - name: Build Docker image
    #   run: |
    #     cd gameroom/
    #     docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${TAG_COMMIT} -f Dockerfile.prod .

    # - name: Push Docker Image
    #   run: |
    #     docker push $IMAGE_NAME:latest
    #     docker push $IMAGE_NAME:${TAG_COMMIT}


#   deploy-job:
#     runs-on: ubuntu-latest
#     environment: backend_env_vars
#     needs: build-job
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
      
#       - name: Install SSH key
#         run: |
#           mkdir -p ~/.ssh
#           echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#         shell: bash
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

#       - name: Create .env file
#         run: |
#           touch .env
#           echo API_KEY="${{ secrets.API_KEY }}" >> .env
#           echo ASSISTANT_ID="${{ secrets.ASSISTANT_ID }}" >> .env
#           echo ORGANIZATION="${{ secrets.ORGANIZATION }}" >> .env
#           echo PROJECT="${{ secrets.PROJECT }}" >> .env
#           echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
#           echo MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
#           echo MYSQL_DATABASE="${{ vars.MYSQL_DATABASE }}" >> .env
#           echo DASHBOARD_ENABLED="${{ vars.DASHBOARD_ENABLED }}" >> .env
#           echo DATABASE_URI="${{ vars.DATABASE_URI }}" >> .env
#           echo WEATHER_API_KEY="${{ secrets.WEATHER_API_KEY }}" >> .env

#       - name: Copy files to Server
#         run: |
#           scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -q backend/compose.prod.yaml ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:/home/${{ vars.DEPLOY_USER }}/compose.yaml
#           scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -q .env ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:/home/${{ vars.DEPLOY_USER }}/.env

#       - name: Deploy on server
#         run: |
#           ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }} "cd /home/${{ vars.DEPLOY_USER }};
#           docker-compose pull;
#           docker-compose up -d;
#           docker image prune -f"
